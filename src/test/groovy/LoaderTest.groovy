/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
import spock.lang.Specification
import com.jim.toolkit.database.Loader;
import static java.util.Calendar.*

class LoaderTest extends Specification {
    def "Simple Loader constructor returns proper name of class"() {
        setup:
	        Loader obj = new Loader();
		
        when:
        	def result = obj.classname

        then:
        	result == "Loader"
    } // end of method


    def "how many ; in semi-colon sample 1 - a test string full of semi-colons"() {
    /** a test string full of semi-colons 
    String semicolonsample = "4; 2017-01-19; C; 25.78; 10; false; Burgers R Us";
        println "... how many semis in [${obj.semicolonsample}] ? "+obj.semis(obj.semicolonsample);
        println "... obj.convert said "+obj.convert();
        println "... obj.toString said "+obj.toString();
    */
        setup:
            Loader obj = new Loader();
            String semicolonsample = "4; 2017-01-19; C; 25.78; 10; false; Burgers R Us|My name is Fred;";
        
        when:
            def result = obj.semis(semicolonsample)
            println "... how many semis in [${semicolonsample}] ? "+obj.semis(semicolonsample);

        then:
            result == 7
            obj.verified == false        
            obj.withId == false
            obj.datex.toString().startsWith("Sat Nov 25 00:00:00 ") == true
            obj.tokens.size() == 7
            obj.tokens[0] == "4"
            obj.tokens[1].trim() == "2017-01-19"
            obj.tokens[2].trim() == "C"
            obj.tokens[3].trim() == "25.78"
            obj.tokens[4].trim() == "10"
            obj.tokens[5].trim() == "false"
            obj.tokens[6].trim() == "Burgers R Us|My name is Fred"
    } // end of method


    def "how many ; in semi-colon sample 2 - a test string full of semi-colons including trailing ;"() {
        setup:
            Loader obj = new Loader();
            String semicolonsample2 = "4; 2017-01-19; C; 25.78; 10; false; Burgers R Us Again|My name is Fred;";
        
        when:
            def result = obj.semis(semicolonsample2);
            println "... how many semis in [${semicolonsample2}] ? "+obj.semis(semicolonsample2);

        then:
            result == 7
    } // end of method


    def "how many ; in semi-colon sample 3 - a test string full of semi-colons w/o trailing ; and no optional Id number to start "() {
        setup:
            Loader obj = new Loader();
            String semicolonsample3 = "2017-01-19; C; 25.78; 10; false; Burgers R Us Again";
        
        when:
            def result = obj.semis(semicolonsample3);
            println "... how many semis in [${semicolonsample3}] ? "+obj.semis(semicolonsample3);

        then:
            result == 6
    } // end of method



    def "how many ; in semi-colon sample 4 - a test string w/minimum no.of semi-colons w/o trailing ; and no optional Id number to start"() {
        setup:
            Loader obj = new Loader();
            String semisample4 = " 2017-11-21; A; 0 ";
        
        when:
            def result = obj.semis(semisample4);
            println "... how many semis in [${semisample4}] ? "+obj.semis(semisample4);

        then:
            result == 3
    } // end of method


    def "Test 1 string full of tokens divided by blanks and no optional Id number to start"() {
        setup:
            Loader obj = new Loader();
            String spacesample1 = "2017-01-21 A -1.23 64 true reason for deed  |My name is Fred";
            
        when:
            def result = obj.blanks(spacesample1);
            println "... how many tokens in [${spacesample1}] ? "+obj.blanks(spacesample1);

        then:
            result == 12
    } // end of method

    def "Test 2 string full of tokens divided by blanks and an optional Id number to start"() {
        setup:
            Loader obj = new Loader();
            String spacesample2 = "78 2017-01-21 A -1.23 64 true Haircuts |My name is Fred";
            
        when:
            def result = obj.blanks(spacesample2);
            println "... how many tokens in [${spacesample2}] ? "+obj.blanks(spacesample2);

        then:
            result == 11
    } // end of method

	
    def "Test 3 string full of tokens divided by blanks and an optional Id number to start & multi-token reason"() {
        setup:
            Loader obj = new Loader();
            String spacesample3 = "78 2017-01-21 A -1.23 6 false Haircuts Are Us    | 'My name is Fred' ";
            
        when:
            def result = obj.blanks(spacesample3);
            println "... how many tokens in [${spacesample3}] ? "+obj.blanks(spacesample3);

        then:
            result == 14
    } // end of method


    
    def "Test 4 string full of tokens divided by blanks and no optional Id number to start"() {
        setup:
            Loader obj = new Loader();
            String spacesample4 = " 2017-11-21 A 123.45 77 true Haircuts|'Fred'";
            
        when:
            def result = obj.blanks(spacesample4);
            println "... how many tokens in [${spacesample4}] ? "+obj.blanks(spacesample4);

        then:
            result == 6
    } // end of method

    
    def "Test 5 string of a reduced set of tokens divided by blanks and no optional Id number to start"() {
        setup:
            Loader obj = new Loader();
            String spacesample5 = " 2017-11-21 A 123.45 77 true";
            
        when:
            def result = obj.blanks(spacesample5);
            println "... how many tokens in [${spacesample5}] ? "+obj.blanks(spacesample5);

        then:
            result == 5
    } // end of method

    
    def "Test 6 string of a minimum set of tokens divided by blanks and no optional Id number to start"() {
        setup:
            Loader obj = new Loader();
            String spacesample6 = " 2017-11-21 A 123.45 ";
            
        when:
            def result = obj.blanks(spacesample6);
            println "... how many tokens in [${spacesample6}] ? "+obj.blanks(spacesample6);

        then:
            result == 3
    } // end of method
	
} // end of class
