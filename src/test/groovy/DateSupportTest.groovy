/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
import spock.lang.Specification
import com.jim.toolkit.tools.DateSupport;
import static java.util.Calendar.*
import com.jim.toolkit.tools.DateSupport;

class DateSupportTest extends Specification {

    def "Simple DateSupport constructor returns proper name of action"() {
        setup:
	        DateSupport obj = new DateSupport();
		
        when:
        	def result = obj.classname
        	def ok = obj.validate();
        	def ok2 = obj.validate("");
        	def ok3 = obj.validate("123");

        then:
        	result == "DateSupport"
    } // end of method


    def "DateSupport.validate() is protected method - can it be used to detect disallowed char.s in string ?"() {
        setup:
	        DateSupport obj = new DateSupport();
		
        when:
        	def result = obj.classname
        	def ok = obj.validate();
        	def ok2 = obj.validate("");
        	def ok3 = obj.validate("123");
        	def ok4 = obj.validate("1-2-3");
        	def ok5 = obj.validate("1-2-3a");

        	println "... DateSupport.validate() ok="+ok;
        	println "... DateSupport.validate('') ok2="+ok2;
        	println "... DateSupport.validate('123') ok3="+ok3;
        	println "... DateSupport.validate('1-2-3') ok4="+ok4;
        	println "... DateSupport.validate('1-2-3a') ok5="+ok5;

        then:
        	ok == true
        	ok2 == true
        	ok3 == true
        	ok4 == false
        	ok5 == false
    } // end of method


    def "DateSupport.hasValidSeparator() - can it be used to detect disallowed char.s in string ?"() {
        setup:
	        DateSupport obj = new DateSupport();
		
        when:
        	def result = obj.classname
        	def ok2 = obj.hasValidSeparator("");
        	def ok3 = obj.hasValidSeparator("123");
        	def ok4 = obj.hasValidSeparator("1-2-3");
        	def ok5 = obj.hasValidSeparator("1-2-3a");
        	def ok6 = obj.hasValidSeparator("1-2-3/");

        	println "... DateSupport.hasValidSeparator('') ok2="+ok2;
        	println "... DateSupport.hasValidSeparator('123') ok3="+ok3;
        	println "... DateSupport.hasValidSeparator('1-2-3') ok4="+ok4;
        	println "... DateSupport.hasValidSeparator('1-2-3a') ok5="+ok5;
        	println "... DateSupport.hasValidSeparator('1-2-3/') ok6="+ok4;

        then:
        	ok2 == false
        	ok3 == false
        	ok4 == true
        	ok5 == false
    } // end of method


    def "DateSupport.hasValidSeparator() - does not like missing parameter"() {
        setup:
	        DateSupport obj = new DateSupport();
		
        when:
        	def ok = obj.hasValidSeparator();
        	//println "... DateSupport.hasValidSeparator() ok="+ok;

        then:
			RuntimeException ex = thrown()
        	println "... DateSupport.hasValidSeparator() RuntimeException ex="+ex;

    } // end of method

    
    def "Compare Java Date convert value VS DateSupport value for same date"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2017-01-01');
			println "... DateSupportTest dat of Date.parse('yyy-MM-dd','2017-01-01')="+dat;
			assert dat.toString().startsWith("Sun Jan 01 ") == true
			assert dat.toString().endsWith(" 2017") == true

	        DateSupport obj = new DateSupport(true);
			println "... DateSupport="+obj.toString()+"---------------\n";
			Date d = new Date();
			println "... d = new Date()="+d;
			
		when:
			println "... obj.isIsoDate(2017-01-01)"
			if (obj.isIsoDate("2017-01-01"))
			{
				d = obj.getIsoDate();
				println "... DateSupportTest.getIsoDate()=|${d}|";
			}
			else
			{
				println "... DateSupportTest.isIsoDate(2017-01-01) ? No. ";
			}
			
		then:
			dat[YEAR] == d[YEAR];
			dat[MONTH] == d[MONTH];
			dat[DATE] == d[DATE];
			println "... DateSupportTest dat=|${dat}| after d[YEAR]=|${d[YEAR]}|  d[MONTH]=|${d[MONTH]}|   d[DATE]=|${d[DATE]}| ";
	} // end of method
	
    
    def "Check DateSupport isIsoDate() method and getIsoDate()"() {
        setup:
	        DateSupport ds = new DateSupport(true);
			 
		when:
			boolean ok = ds.isIsoDate('2017-09-21')
			String ans = ds.getIsoDate().toString();

		then:
			ok == true;
            ans.startsWith("Thu Sep 21 ") == true
            ans.endsWith(" 2017") == true
	} // end of method
	
	
    // funny but if we feed a bad month value like '19' logic reduces 19 - 12 = 7 and bumps year by 2 ?
    def "Check DateSupport isIsoDate(2017-19-21) method and getIsoDate() with bad date"() {
        setup:
	        DateSupport ds = new DateSupport(true);
			 
		when:
			boolean ok = ds.isIsoDate('2017-19-21')
			String ans = ds.getIsoDate().toString();
			println "... ds.getIsoDate() on bad date gives |${ans}|" // |Sun Jul 21 15:39:53 CEST 2019|

		then:
			ok == false;
            ans.startsWith("Sun Jul 21 ") == true
            ans.endsWith(" 2019") == true
	} // end of method
	
    
    def "Check DateSupport (2017-09-21) method should work as expected"() {
        setup:
	        DateSupport ds = new DateSupport(true);
			 
		when:
			boolean ok = ds.isIsoDate('2017-09-21')

		then:
			ok == true;
	} // end of method
	
    
    def "Check DateSupport (Fri Jan 05 16:46:56 CET 2018) method for wrong ISO string format"() {
        setup:
	        DateSupport ds2 = new DateSupport(true);
			println ":... datex="+ds2.datex; // :... datex=Fri Jan 05 16:46:56 CET 2018

		when:
			boolean ok = ds2.isIsoDate(ds2.datex) // false as it's a bad format
			Date x = ds2.getDate();

		then:
			ok == false;
	} // end of method
	
    
    def "Check DateSupport .isIsoDate(1 21-10-30) method for bad string"() {
        setup:
	        DateSupport ds = new DateSupport(true);
			 
		when:
			boolean ok = ds.isIsoDate("1 21-10-30")

		then:
			ok == false;
	} // end of method
    
    def "Check DateSupport .isDate(1 21-10-30) method for bad string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
	        obj.say "... today is "+obj.datex;
			 
		when:
			boolean ok = obj.isDate("2017-10-30")
			def ans = obj.getDate();

		then:
			ok == false;
            ans.toString().startsWith("Tue Apr 08 ") == true

	} // end of method
    
    def "Check DateSupport .isIsoDate(2017-10-30) method for good string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isIsoDate("2017-10-30")
			def ans = obj.getDate();

		then:
			ok == true;
            ans.toString().startsWith("Tue Apr 08 ") == true
	} // end of method
    
    def "Check DateSupport .isIsoDate(30-10-2017) method for reversed string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isIsoDate("30-10-2017")

		then:
			ok == false;
	} // end of method
    
    
    def "DateSupport.getDate() method for without first call to isDate() method ?"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			// gives todays date
			def ans = obj.getDate();
			def iso = obj.getIsoDate();
			println "... .getDate() =|${ans}|"
			println "... .getIsoDate() =|${iso}|"

		then:
			// Sun Jan 07 10:46:42 CET 2018
            ans.toString().startsWith("Sun Jan 07 ") == false
	} // end of method


    def "Check DateSupport .isDate(29/09/2017) method for good date string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate("29/09/2017")
			def ans = obj.getDate();

		then:
			ok == true;
            ans.toString().startsWith("Fri Sep 29 ") == true
	} // end of method

    
    def "Check DateSupport .isDate( 7 //) method for bad date string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate(" 7 //")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method

    
    def "Check DateSupport .isDate(31/09/2017) method for bad date string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate("31/09/2017")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method

    
    def "Check DateSupport .isDate(32/09/2017) method for bad date string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate("32/09/2017")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method

    
    def "Check DateSupport .isDate(2018/32/109 ) method for bad date string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate("2018/32/109 ")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method

    def "Check DateSupport - does method work for .isDate(29 9 2017)"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate("29 9 2017")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method

    
    def "Check DateSupport .isDate(9/31/1917) method for month-first date string"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate("9/31/1917")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method


    def "Check DateSupport - does method work for .isDate(blank string)"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			 
		when:
			boolean ok = obj.isDate(" ")
			def ans = obj.getDate();

		then:
			ok == false;
	} // end of method


    def "Check DateSupport - does method getNextDate(29/09/2017) work ?"() {
        setup:
	        DateSupport obj = new DateSupport(true);
			Date d = new Date()

		when:
        	// fails on ... getNextDate error:Unparseable date: "29/09/2017"
			d = obj.getNextDate("29/09/2017",7) // returns NULL 
			println "...>> getNextDate(29/09/2017, 7)=|${d}|"
			boolean ok = obj.isDate(" ")
			def ans = obj.getDate();
			Date today = new Date()

		then:
			d == null;
			ok == false;
			//ans == today  - not sure on this - needs more work here...
			//d[MONTH] == 8
	} // end of method


    def "Check DateSupport - does Check() method  detect bad empty ?"() {
        setup:
	        DateSupport obj = new DateSupport(true);

		when:
			boolean ok = obj.check(" ")

		then:
			ok == false;
	} // end of method


    def "Check DateSupport - does Check() method detect ISO format using slashes ? No."() {
        setup:
	        DateSupport obj = new DateSupport(true);

		when:
			boolean ok = obj.check("1942/12/25 ")

		then:
			ok == false;
	} // end of method} // end of class


    def "DateSupport.Check() method detect properly formatted date ?"() {
        setup:
	        DateSupport obj = new DateSupport(true);

		when:
			boolean ok = obj.check("1942-12-25 ")

		then:
			ok == true;
	} // end of method


    def "DateSupport.Check() method detect reverse formatted date ? Yes."() {
        setup:
	        DateSupport obj = new DateSupport(true);

		when:
			boolean ok = obj.check("25-12-1942 ")

		then:
			ok == true;
	} // end of method

} // end of class
