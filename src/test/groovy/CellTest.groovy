/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
import spock.lang.Specification
import groovy.beans.*
import com.jim.toolkit.Cell;

class CellTest extends Specification {
    def "Simple Cell constructor returns proper name of action"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2018-01-01');
			Cell obj = new Cell([date:dat, type:'B', amount:-123.45, ccy:3, client:123, flag:true, reason:'Start here', name:'Mad Max'])
		
        when:
        	def result = obj.cvtType()
        	println "... result=[${result}]"
        	println "... date=[${obj.date.toString()}]"

        then:
        	result == "Income "
        	obj.date.toString().startsWith('Mon Jan 01 00:00:00 ') == true
        	obj.type == 'B'
        	obj.amount == -123.45
            obj.ccy == 3
        	obj.client == 123
        	obj.flag == true;
        	obj.reason == 'Start here'
            obj.name == 'Mad Max'
    } // end of test


    def "Simple Cell constructor()"() {
        setup:
            Cell obj = null;            
        when:
            obj = new Cell();
            def ty = obj.cvtType()
            def myid = obj.setId() // pulls highest Id from 'core' table by default

        then:
            obj.toString().endsWith(/ A 0.00 1 0 false "unknown" ""/) == true
            //obj.id == 0
            //obj.date.toString() == '2018-01-01' -- depends on date this test  is run, so changed
            obj.type == 'A'
            obj.amount == 0.00
            obj.ccy == 1
            obj.client == 0
            obj.flag == false;
            obj.reason == 'unknown'   
            obj.name == ''   
            ty == 'Balance'  
            myid == 0       
    } // end of test
    
    
    def "Simple Cell constructor using Map"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2018-01-01');
			Cell obj = null;
			
        when:
	        dat += 4;
    	    Map m = [id:27, date:dat, type:'C', amount:-75.05, ccy:2,  client:13, flag:true, reason:'Bingo', name:'Max'];
        	obj = new Cell(m);
	        println "Cell(map).toString() = [${obj.toString()}]"
	        def cellmap = obj.toMap();

        then:
        	obj.id == 27
        	obj.date.toString().startsWith('Fri Jan 05 00:00:00 ') == true
        	obj.type == 'C'
        	obj.amount == -75.05
            obj.ccy == 2
        	obj.client == 13
        	obj.flag == true;
        	obj.reason == 'Bingo'
            obj.name == 'Max'
        	
        	cellmap instanceof Map
			cellmap['id'] == 27
			cellmap['flag'] == true
			cellmap['type'] == 'C'
			cellmap['amount'] == -75.05
            cellmap['ccy'] == 2
            cellmap['client'] == 13
        	cellmap['reason'] == 'Bingo'
        	cellmap['date'] == '2018-01-05'
    } // end of test
    
    
    def "Simple Cell constructor using Binding"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2017-12-25');
			Cell obj = null;
	        Binding binding = new Binding();
        	binding.setVariable("id", 14);
    	    binding.setVariable("date", dat);
        	binding.setVariable("type", "C");
        	binding.setVariable("amount", -1.23);
            binding.setVariable("ccy", 3);
        	binding.setVariable("client", 64);
        	binding.setVariable("flag", true);
        	binding.setVariable("reason", "Reason for deed");
            binding.setVariable("name", "Jim");
			Cell obj2 = new Cell();
			
        when:
	        obj2.setBinding(binding)
    	    println "Cell.setBinding(binding) = [${obj2.toString()}]\n"
	        def cellmap = obj2.toMap();

        then:
        	//obj2.id == 0 -now not Zero since H2Table had max() method added
        	obj2.date.toString().startsWith('Mon Dec 25 00:00:00 ') == true
        	obj2.type == 'C'
        	obj2.amount == -1.23
            obj2.ccy == 3
        	obj2.client == 64
        	obj2.flag == true;
        	obj2.reason == 'Reason for deed'
            obj2.name == 'Jim'
        	
        	cellmap instanceof Map
			//cellmap['id'] == 0
            cellmap['date'] == '2017-12-25'
            cellmap['type'] == 'C'
			cellmap['amount'] == -1.23
            cellmap['ccy'] == 3
            cellmap['client'] == 64
            cellmap['flag'] == true
        	cellmap['reason'] == 'Reason for deed'
            cellmap['name'] == 'Jim'
    } // end of test

    
    def "Cell constructor using data values only"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2017-12-25');
			Cell obj3 = null;
	        boolean yn = true;
    	    char ch= 'C'
			
        when:
        	obj3 = new Cell(17,dat,ch,12.34,2, 77499,yn, "Hi kids", "Martha");
	        println "Cell3 = ${obj3.toString()}"

        then:
        	//thrown groovy.lang.GroovyRuntimeException
        	obj3.id     == 17
        	obj3.date.toString().startsWith('Mon Dec 25 00:00:00 ') == true
        	obj3.type   == 'C'
        	obj3.amount == 12.34
            obj3.ccy    == 2
        	obj3.client == 77499
        	obj3.flag   == true;
        	obj3.reason == 'Hi kids'
            obj3.name == 'Martha'
    } // end of test
    
    
    def "Cell constructor using some limited data values only"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2017-12-25');
			Cell obj4 = null;
    	    char ch= 'C'
			
        when:
        	obj4 = new Cell(27,dat,ch,12.34);
	        println "Cell4 = ${obj4.toString()}"

        then:
        	obj4.id == 27
        	obj4.date.toString().startsWith('Mon Dec 25 00:00:00 ') == true
        	obj4.type == 'C'
        	obj4.amount == 12.34
            obj4.ccy == 1
        	obj4.client == 0
        	obj4.flag == false;
        	obj4.reason == 'unknown'
			
			//groovy.lang.GroovyRuntimeException ex = thrown()
			
            // Alternative syntax: def ex = thrown(InvalidDeviceException)
            //ex.message == 'Could not find matching constructor for: Cell(java.lang.Integer, java.util.Date, java.lang.Character, java.math.BigDecimal)'            
    } // end of test

    
    def "Cell constructor using Binding"() {
        setup:
		    Date dat = Date.parse('yyy-MM-dd','2017-12-25');
			Cell obj5 = null;
	        Binding binding = new Binding();
        	binding.setVariable("id", 14);
    	    binding.setVariable("date", dat);
        	binding.setVariable("type", "C");
			
        when:
        	obj5 = new Cell(binding);
	        println "Cell5 = ${obj5.toString()}"

        then:
			groovy.lang.GroovyRuntimeException ex = thrown()
			
            // Alternative syntax: def ex = thrown(InvalidDeviceException)
            ex.message == 'Could not find matching constructor for: com.jim.toolkit.Cell(groovy.lang.Binding)'            
    } // end of test
    
    
    def "Confirm Cell.toOutput method returns proper values for this"() {
        setup:
            Date dat = Date.parse('yyy-MM-dd','2018-01-01');
            Cell obj = new Cell([date:dat, type:'B', amount:-123.45, ccy:3, client:123, flag:true, reason:'Start here', name:'Fred Mertz'])
        
        when:
            def output = obj.toOutput()
            def objstring = obj.toString()

        then:
            output == /0; "2018-01-01"; "B"; -123.45; 3; 123; "true"; "Start here"; "Fred Mertz"; /
            objstring == /0 2018-01-01 B -123.45 3 123 true "Start here" "Fred Mertz"/
    } // end of test
    
    
} // end of class
